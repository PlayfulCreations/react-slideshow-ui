'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * switch target DOMElement to fullscreen mode.
 * @param element {Element} DOMElement that you want to make fullscreen.
 * @param callback {Function} callback function after calling fullscreen api.
 */
function switchFullscreen(element, callback) {
  if (!isFullscreen()) {
    enterFullscreen(element);
    fullScreenChange(function (event) {
      if (isFullscreen()) {
        callback(true);
      } else {
        callback(false);
      }
    });
  } else {
    exitFullscreen(element);
  }
}

/**
 * check whether fullscreen or not.
 * @returns {boolean}
 */
function isFullscreen() {
  if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
    return false;
  }
  return true;
}

/**
 * enter fullscreen mode.
 * @param {Element} element
 */
function enterFullscreen(element) {
  if (element.requestFullscreen) {
    element.requestFullscreen();
  } else if (element.msRequestFullscreen) {
    element.msRequestFullscreen();
  } else if (element.mozRequestFullScreen) {
    element.parentElement.mozRequestFullScreen();
  } else if (element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
  }
}

/**
 * exit fullscreen mode.
 * @param {Element} element
 */
function exitFullscreen(element) {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  }
}

/**
 * injection function to onfullscreenchange.
 * @param callback
 */
function fullScreenChange(callback) {
  if (document.fullscreenEnabled) {
    document.addEventListener('fullscreenchange', callback);
  } else if (document.mozFullScreenEnabled) {
    document.onmozfullscreenchange = callback;
  } else if (document.webkitFullscreenEnabled) {
    document.addEventListener('webkitfullscreenchange', callback);
  } else if (document.msFullscreenEnabled) {
    document.addEventListener('msfullscreenchange', callback);
  }
}

exports.default = switchFullscreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mdWxsc2NyZWVuLmpzIl0sIm5hbWVzIjpbInN3aXRjaEZ1bGxzY3JlZW4iLCJlbGVtZW50IiwiY2FsbGJhY2siLCJpc0Z1bGxzY3JlZW4iLCJlbnRlckZ1bGxzY3JlZW4iLCJmdWxsU2NyZWVuQ2hhbmdlIiwiZXZlbnQiLCJleGl0RnVsbHNjcmVlbiIsImRvY3VtZW50IiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJtb3pGdWxsU2NyZWVuRWxlbWVudCIsIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IiwibXNGdWxsc2NyZWVuRWxlbWVudCIsInJlcXVlc3RGdWxsc2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwicGFyZW50RWxlbWVudCIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwiRWxlbWVudCIsIkFMTE9XX0tFWUJPQVJEX0lOUFVUIiwibXNFeGl0RnVsbHNjcmVlbiIsIm1vekNhbmNlbEZ1bGxTY3JlZW4iLCJ3ZWJraXRFeGl0RnVsbHNjcmVlbiIsImZ1bGxzY3JlZW5FbmFibGVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1vekZ1bGxTY3JlZW5FbmFibGVkIiwib25tb3pmdWxsc2NyZWVuY2hhbmdlIiwid2Via2l0RnVsbHNjcmVlbkVuYWJsZWQiLCJtc0Z1bGxzY3JlZW5FbmFibGVkIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztBQUtBLFNBQVNBLGdCQUFULENBQTBCQyxPQUExQixFQUFtQ0MsUUFBbkMsRUFBNkM7QUFDM0MsTUFBSSxDQUFDQyxjQUFMLEVBQXFCO0FBQ25CQyxvQkFBZ0JILE9BQWhCO0FBQ0FJLHFCQUFpQixVQUFTQyxLQUFULEVBQWdCO0FBQy9CLFVBQUlILGNBQUosRUFBb0I7QUFDbEJELGlCQUFTLElBQVQ7QUFDRCxPQUZELE1BRU87QUFDTEEsaUJBQVMsS0FBVDtBQUNEO0FBQ0YsS0FORDtBQU9ELEdBVEQsTUFTTztBQUNMSyxtQkFBZU4sT0FBZjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7QUFJQSxTQUFTRSxZQUFULEdBQXdCO0FBQ3RCLE1BQ0UsQ0FBQ0ssU0FBU0MsaUJBQVYsSUFDQSxDQUFDRCxTQUFTRSxvQkFEVixJQUVBLENBQUNGLFNBQVNHLHVCQUZWLElBR0EsQ0FBQ0gsU0FBU0ksbUJBSlosRUFLRTtBQUNBLFdBQU8sS0FBUDtBQUNEO0FBQ0QsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQ7Ozs7QUFJQSxTQUFTUixlQUFULENBQXlCSCxPQUF6QixFQUFrQztBQUNoQyxNQUFJQSxRQUFRWSxpQkFBWixFQUErQjtBQUM3QlosWUFBUVksaUJBQVI7QUFDRCxHQUZELE1BRU8sSUFBSVosUUFBUWEsbUJBQVosRUFBaUM7QUFDdENiLFlBQVFhLG1CQUFSO0FBQ0QsR0FGTSxNQUVBLElBQUliLFFBQVFjLG9CQUFaLEVBQWtDO0FBQ3ZDZCxZQUFRZSxhQUFSLENBQXNCRCxvQkFBdEI7QUFDRCxHQUZNLE1BRUEsSUFBSWQsUUFBUWdCLHVCQUFaLEVBQXFDO0FBQzFDaEIsWUFBUWdCLHVCQUFSLENBQWdDQyxRQUFRQyxvQkFBeEM7QUFDRDtBQUNGOztBQUVEOzs7O0FBSUEsU0FBU1osY0FBVCxDQUF3Qk4sT0FBeEIsRUFBaUM7QUFDL0IsTUFBSU8sU0FBU0QsY0FBYixFQUE2QjtBQUMzQkMsYUFBU0QsY0FBVDtBQUNELEdBRkQsTUFFTyxJQUFJQyxTQUFTWSxnQkFBYixFQUErQjtBQUNwQ1osYUFBU1ksZ0JBQVQ7QUFDRCxHQUZNLE1BRUEsSUFBSVosU0FBU2EsbUJBQWIsRUFBa0M7QUFDdkNiLGFBQVNhLG1CQUFUO0FBQ0QsR0FGTSxNQUVBLElBQUliLFNBQVNjLG9CQUFiLEVBQW1DO0FBQ3hDZCxhQUFTYyxvQkFBVDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7QUFJQSxTQUFTakIsZ0JBQVQsQ0FBMEJILFFBQTFCLEVBQW9DO0FBQ2xDLE1BQUlNLFNBQVNlLGlCQUFiLEVBQWdDO0FBQzlCZixhQUFTZ0IsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDdEIsUUFBOUM7QUFDRCxHQUZELE1BRU8sSUFBSU0sU0FBU2lCLG9CQUFiLEVBQW1DO0FBQ3hDakIsYUFBU2tCLHFCQUFULEdBQWlDeEIsUUFBakM7QUFDRCxHQUZNLE1BRUEsSUFBSU0sU0FBU21CLHVCQUFiLEVBQXNDO0FBQzNDbkIsYUFBU2dCLGdCQUFULENBQTBCLHdCQUExQixFQUFvRHRCLFFBQXBEO0FBQ0QsR0FGTSxNQUVBLElBQUlNLFNBQVNvQixtQkFBYixFQUFrQztBQUN2Q3BCLGFBQVNnQixnQkFBVCxDQUEwQixvQkFBMUIsRUFBZ0R0QixRQUFoRDtBQUNEO0FBQ0Y7O2tCQUVjRixnQiIsImZpbGUiOiJmdWxsc2NyZWVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzd2l0Y2ggdGFyZ2V0IERPTUVsZW1lbnQgdG8gZnVsbHNjcmVlbiBtb2RlLlxuICogQHBhcmFtIGVsZW1lbnQge0VsZW1lbnR9IERPTUVsZW1lbnQgdGhhdCB5b3Ugd2FudCB0byBtYWtlIGZ1bGxzY3JlZW4uXG4gKiBAcGFyYW0gY2FsbGJhY2sge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBjYWxsaW5nIGZ1bGxzY3JlZW4gYXBpLlxuICovXG5mdW5jdGlvbiBzd2l0Y2hGdWxsc2NyZWVuKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gIGlmICghaXNGdWxsc2NyZWVuKCkpIHtcbiAgICBlbnRlckZ1bGxzY3JlZW4oZWxlbWVudCk7XG4gICAgZnVsbFNjcmVlbkNoYW5nZShmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGlzRnVsbHNjcmVlbigpKSB7XG4gICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV4aXRGdWxsc2NyZWVuKGVsZW1lbnQpO1xuICB9XG59XG5cbi8qKlxuICogY2hlY2sgd2hldGhlciBmdWxsc2NyZWVuIG9yIG5vdC5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0Z1bGxzY3JlZW4oKSB7XG4gIGlmIChcbiAgICAhZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgJiZcbiAgICAhZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgJiZcbiAgICAhZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgJiZcbiAgICAhZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudFxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogZW50ZXIgZnVsbHNjcmVlbiBtb2RlLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGVudGVyRnVsbHNjcmVlbihlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbihFbGVtZW50LkFMTE9XX0tFWUJPQVJEX0lOUFVUKTtcbiAgfVxufVxuXG4vKipcbiAqIGV4aXQgZnVsbHNjcmVlbiBtb2RlLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuKGVsZW1lbnQpIHtcbiAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7XG4gICAgZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHtcbiAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xuICB9XG59XG5cbi8qKlxuICogaW5qZWN0aW9uIGZ1bmN0aW9uIHRvIG9uZnVsbHNjcmVlbmNoYW5nZS5cbiAqIEBwYXJhbSBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBmdWxsU2NyZWVuQ2hhbmdlKGNhbGxiYWNrKSB7XG4gIGlmIChkb2N1bWVudC5mdWxsc2NyZWVuRW5hYmxlZCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96RnVsbFNjcmVlbkVuYWJsZWQpIHtcbiAgICBkb2N1bWVudC5vbm1vemZ1bGxzY3JlZW5jaGFuZ2UgPSBjYWxsYmFjaztcbiAgfSBlbHNlIGlmIChkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQubXNGdWxsc2NyZWVuRW5hYmxlZCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21zZnVsbHNjcmVlbmNoYW5nZScsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzd2l0Y2hGdWxsc2NyZWVuO1xuIl19